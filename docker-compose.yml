version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: rag-postgres
    environment:
      POSTGRES_DB: ${DB_NAME:-rag_db_training}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    networks:
      - rag-network

  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: rag-api
    environment:
      # OpenAI Configuration
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      
      # VoyageAI Configuration
      VOYAGE_API_KEY: ${VOYAGE_API_KEY}
      
      # Database Configuration
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-rag_db_training}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
      
      # FAISS Configuration
      FAISS_INDEX_PATH: /app/faiss_index
      
      # LLM Configuration
      LLM_MODEL: ${LLM_MODEL:-gpt-4o}
      EMBEDDING_MODEL: ${EMBEDDING_MODEL:-voyage-3-large}
      TOP_K_RESULTS: ${TOP_K_RESULTS:-5}
      
      # Logging Configuration
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      
      # Uvicorn Configuration
      WORKERS: ${WORKERS:-4}
    volumes:
      - faiss_index:/app/faiss_index
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - rag-network

volumes:
  postgres_data:
    name: rag_postgres_data
  faiss_index:
    name: rag_faiss_index

networks:
  rag-network:
    name: rag-network
    driver: bridge

